<template>
  <div class="home-page">
    <div class="home-header">
      <text id="{{status === 'todo'? 'active-title' : '' }}" @click="changePage('todo')">待办</text>
      <text id="{{status === 'doing'? 'active-title' : '' }}" @click="changePage('doing')">在办</text>
      <text id="{{status === 'done'? 'active-title' : '' }}" @click="changePage('done')">已办</text>
      <text id="{{status === 'count'? 'active-title' : '' }}" @click="changePage('count')">统计</text>
    </div>
    <list>
      <list-item for="listData" type="listItem" class="list-item" tid="uniqueId" @click="handleReWrite($idx)" @longpress="openDelete">
        <text class="list-text">{{$item.msg}}</text>
        <input type="checkbox" class="delete-checkbox" if="{{deleteFlag}}" @click="handleChoose($idx)"></input>
      </list-item>
    </list>
    <div class="add-button" @click="addNewToDo">
      <div class="vertical-div"></div>
       <div class="horizontal-div"></div>
    </div>
    <div id="{{filterId}}" if="filterShow" @click="handleCancel">
    </div>
    <div id="{{addDivId}}" if="filterShow">
        <textarea onchange="textareaChange" class="add-textarea" placeholder="输入待办事项" maxlength=50>
        {{newToDo}}
        </textarea>
        <div class="button-container">
          <div class="line-div"></div>
          <div class="bottom-button-container">
            <div class="finish-button" @click="handleFinish">
              <text>完成</text>
            </div>
            <div class="cancel-button" @click="handleToast('长按放弃')" @longpress="handleForgive()">
              <text>放弃</text>
            </div>
          </div>
        </div>
    </div>
    <div id="{{statusDivId}}" if="deleteFlag">
      <div class="status-div-fir-div">
        <div if="status!='todo'" @click="changeStatus(1)"><text>移至待办</text></div>
        <div if="status!='doing'" @click="changeStatus(2)"><text>移至在办</text></div>
        <div if="status!='done'" @click="changeStatus(3)"><text>移至已办</text></div>
      </div>
      <div class="status-div-sec-div">
        <div class="status-div-sec-div-fir" @click="handleDelete"><text>删除</text></div>
        <div class="status-div-sec-div-sec" @click="handleCancelStatus"><text>取消</text></div>
      </div>
    </div>
  </div>
</template>

<script>
import router from '@system.router'
import prompt from '@system.prompt'
import storage from '@system.storage'

export default {
  private: {
    listData:[],
    status:'todo',                          //menu状态
    filterShow:false,                       //遮罩和弹窗开关控制
    addDivId:'add-div',                     //弹窗动画控制
    filterId:'filter',                      //弹窗动画控制
    newToDo:'',                             //弹窗input
    reWriteFlag:false,                      //添加或修改flag
    reWriteId:0,                            //修改list index
    //listItemClass:'list-item'               //修改点击动画控制
    deleteFlag:false,                         //删除修改flag
    statusDivId:'status-div'                //修改statusdiv动画
  },
  //lifecycle hooks
  
  onInit() {
    this.$on('reNewStorage',this.handleReNewStorage)
    let that=this
    storage.get({
      key: 'listData',
      success: function(data) {
        if(data!=''){
          that.handleToast('读取成功')
          data=JSON.parse(data)
          that.listData=data
        }else{
          that.listData=[]
          that.handleToast('存储为空')
        }
      },
      fail: function() {
        that.handleToast(`错误！`)
      }
    })
  },

  //methods

  changeStatus(status){
    this.listData.forEach((ele)=>{
      if(ele.ckecked){
        ele.status=status
      }
    })
    this.handleCancelStatus()
    this.$emit('reNewStorage',{})
  },
  handleDelete(){
    this.listData=this.listData.filter((ele)=>{
      return !ele.checked
    })
    this.handleCancelStatus()
    this.$emit('reNewStorage',{})
  },
  handleCancelStatus(){
    this.statusDivId='status-div-out'
    this.listData.forEach((ele)=>{
      ele.checked=false
    })
    setTimeout(()=>{
      this.statusDivId='status-div'
      this.deleteFlag=false
    },196)
  },
  handleChoose(id){
    this.listData[id].checked=!this.listData[id].checked
  },
  openDelete(){
    this.deleteFlag=true
  },
  handleReNewStorage(){
    let that=this
    storage.set({
      key: 'listData',
      value:JSON.stringify( this.listData ),
      success: function() {
        that.handleToast('更新成功')
      },
      fail: function(data,code) {
        that.handleToast(`错误！${code}`)
      }
    })
  },
  routeDetail () {
    router.push ({
      uri: '/DemoDetail'
    })
  },
  onMenuPress() {
    this.$app.$def.showMenu()
  },
  addNewToDo () {
    //this.newToDo=''
    this.filterShow=!this.filterShow
    //prompt.showToast({ message: '123' })
  },
  changePage(status){
    this.status=status
  },
  handleCancel(){
    this.addDivId='add-div-out'
    this.filterId='filter-out'
    if(this.reWriteFlag){
      this.newToDo=''
    }
    this.reWriteFlag=false
    setTimeout(()=>{
      this.filterShow=false
      this.addDivId='add-div'
      this.filterId='filter'
    },196)
  },
  textareaChange(e){
    this.newToDo=e.text
  },
  handleToast(text){
    prompt.showToast({ message: text })
  },
  handleFinish(){
    if(!this.reWriteFlag){
      this.listData.unshift({
        msg:this.newToDo,
        ckecked:false,
        status:1
      })
      this.newToDo=''
      this.handleCancel()
    }else{
      this.reWriteFlag=false
      this.listData.splice(this.reWriteId,1,{
        msg:this.newToDo,
        ckecked:false,
        status:1
      })
      this.newToDo=''
      this.handleCancel()
    }
    this.$emit('reNewStorage',{})
  },
  handleForgive(){
    this.newToDo=''
    this.handleCancel()
  },
  handleReWrite(idx){
    if(!this.deleteFlag){
      this.reWriteId=idx
      this.newToDo=this.listData[idx].msg
      this.reWriteFlag=true
      //this.listItemClass='list-item-click'
      setTimeout(()=>{
        //this.listItemClass='list-item'
        this.filterShow=true
      },200)
    }
  }

}
</script>

<style lang="less">

  @myyellow:#ffc100;
  @mygray:#e9e9e9;
  @bggray:#f7f7f7;

  .add-div-mixin() {
    z-index: 30;
    position: fixed;
    border-radius: 40px;
    height: 980px;
    width: 100%;
    background-color: #fff;
    bottom: 0px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    padding: 0px 18px 0px 18px;
  }

  .status-div-mixin() {
    z-index: 30;
    position: fixed;
    border-radius: 40px;
    height: 320px;
    width: 100%;
    background-color: #fff;
    bottom: 0px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    padding: 68px 48px 68px 48px;
  }

  @keyframes filterout{
    0% {
      opacity: 0.2;
    }
    100% {
      opacity: 0;
    }
  }

  @keyframes moveout{
    0% {
      transform: translateY(0px);
    }
    100% {
      transform: translateY(300px);
    }
  }

  @keyframes movein{
    0% {
      transform: translateY(300px);
    }
    100% {
      transform: translateY(0px);
    }
  }

  /*

  @keyframes clickitem {
    0% {
      background-color: #fff;
      width: 100%;
      height: 132px;
    }
    50% {
      background-color: #e9e9e9;
      width: 90%;
      height: 120px;
    }
    100% {
      background-color: #fff;
      width: 100%;
      height: 132px;
    }
  }

  .list-item-click{
    .list-item();
    animation-name: clickitem;
    animation-duration: 200ms;
    animation-fill-mode: forwards;
    animation-timing-function: ease-in;
    animation-iteration-count: 1;
  }

  */

  #status-div{
    .status-div-mixin();
    animation-name: movein;
    animation-duration: 200ms;
    animation-fill-mode: forwards;
    animation-timing-function: ease-in;
    animation-iteration-count: 1;
    > div{
      width: 100%;
      height: 72px;
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
      padding:0px 46px 0px 46px;
    }
    .status-div-fir-div {
      > div {
        width: 248px;
        height: 72px;
        border-radius: 36px;
        background-color: @myyellow;
        > text {
          width: 100%;
          height: 100%;
          text-align: center;
          font-size: 36px;
          font-weight: 800;
          color: rgb(50, 50, 50);
        }
      }
    }
    .status-div-sec-div {
      > .status-div-sec-div-fir {
        width: 248px;
        height: 72px;
        border-radius: 36px;
        background-color: #8b0000;
        > text {
          width: 100%;
          height: 100%;
          text-align: center;
          font-size: 36px;
          font-weight: 800;
          color: #fff;
        }
      }
      > .status-div-sec-div-sec {
        width: 248px;
        height: 72px;
        border-radius: 36px;
        background-color: rgb(160, 160, 160);
        > text {
          width: 100%;
          height: 100%;
          text-align: center;
          font-size: 36px;
          font-weight: 800;
          color: #fff;
        }
      }
    }
  }

  #status-div-out{
    .status-div-mixin();
    animation-name: moveout;
    animation-duration: 200ms;
    animation-fill-mode: forwards;
    animation-timing-function: ease-in;
    animation-iteration-count: 1;
    > div{
      width: 100%;
      height: 72px;
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      align-items: center;
      padding:0px 46px 0px 46px;
    }
    .status-div-fir-div {
      > div {
        width: 248px;
        height: 72px;
        border-radius: 36px;
        background-color: @myyellow;
        > text {
          width: 100%;
          height: 100%;
          text-align: center;
          font-size: 36px;
          font-weight: bold;
          color: rgb(50, 50, 50);
        }
      }
    }
    .status-div-sec-div {
      > .status-div-sec-div-fir {
        width: 248px;
        height: 72px;
        border-radius: 36px;
        background-color: #8b0000;
        > text {
          width: 100%;
          height: 100%;
          text-align: center;
          font-size: 38px;
          font-weight: bold;
          color: #fff;
        }
      }
      > .status-div-sec-div-sec {
        width: 248px;
        height: 72px;
        border-radius: 38px;
        background-color: rgb(160, 160, 160);
        > text {
          width: 100%;
          height: 100%;
          text-align: center;
          font-size: 38px;
          font-weight: bold;
          color: #fff;
        }
      }
    }
  }

  .delete-checkbox{
    width: 84px;
    color: @myyellow;
    background-color: #fff;
  }

  .delete-checkbox:ckecked{
    color: @myyellow;
  }

  .line-div{
    width: 726px;
    height: 2px;
    background-color: @mygray;
    border-radius: 1px;
  }

  .bottom-button-container{
    display: flex;
    flex-direction: row;
    justify-content: space-around;
    align-items: center;
    width: 100%;
    .cancel-button {
      height: 72px;
      width: 160px;
      background-color: @mygray;
      border-radius: 36px;
      >text {
        width: 160px;
        text-align: center;
        font-size: 26px;
        font-weight: bold;
        color: red;
      }
    }
  }

  .finish-button{
    height: 72px;
    width: 400px;
    background-color: @mygray;
    border-radius: 36px;
    >text {
      width: 400px;
      text-align: center;
      font-size: 36px;
      font-weight: bold;
      color: @myyellow;
    }
  }

  .button-container{
    height: 720px;
    width: 100%;
    background-color: #fff;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    padding: 10px 20px 0px 20px;
    margin-bottom: 40px;
    text-align: center;
  }

  .list-text {
    lines: 3;
    text-overflow: ellipsis;
  }

    #add-div-out{
    .add-div-mixin();
    animation-name: moveout;
    animation-duration: 200ms;
    animation-fill-mode: none;
    animation-timing-function: ease-in;
    animation-iteration-count: 1;
    .add-textarea{
      height: 200px;
      width: 100%;
      border-radius: 40px;
      margin: 28px 16px 0px 16px;
    }
  }

  #add-div{
    .add-div-mixin();
    animation-name: movein;
    animation-duration: 200ms;
    animation-fill-mode: forwards;
    animation-timing-function: ease-in;
    animation-iteration-count: 1;
    .add-textarea{
      height: 200px;
      width: 100%;
      border-radius: 40px;
      margin: 28px 16px 0px 16px;
    }
  }

  #filter{
    position: fixed;
    width: 100%;
    height: 100%;
    background-color: #000;
    opacity: .2;
    z-index: 20;
  }

  #filter-out{
    position: fixed;
    width: 100%;
    height: 100%;
    background-color: #000;
    opacity: .2;
    z-index: 20;
    animation-name: filterout;
    animation-duration: 200ms;
    animation-fill-mode: forwards;
    animation-timing-function: linear;
    animation-iteration-count: 1;
  }

  .list-item{
    height: 162px;
    background-color: #fff;
    border-radius: 34px;
    margin: 12px 18px 12px 18px;
    padding: 0px 12px 0px 18px;
    width: 100%;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items:center ;
    > text{
      width: 90%;
    }
  }

  .home-page {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    background-color: @bggray;
    .home-header {
      width: 750px;
      height: 140px;
      display: flex;
      flex-direction: row;
      justify-content: space-around;
      align-items:center ;
      padding:18px 10px 0px 10px;
      > text {
        font-size: 58px;
        color: #959595;
        font-weight: normal;
      }
      #active-title {
        font-size: 58px;
        color: #000 ;
        font-weight: bold ;
      }
    }
  }

  .title {
    font-size: 40px;
    text-align: center;
  }

  .add-button{
    z-index: 10;
    position: fixed;
    bottom: 68px;
    right: 68px;
    width: 120px;
    height: 120px;
    background-color: @myyellow;
    border-radius: 50%;
    .vertical-div {
      height: 60px;
      width: 8px;
      background-color: #fff;
      position: relative;
      left:56px;
      border-radius: 4px;
      top:30px;
    }
    .horizontal-div {
      height: 8px;
      width: 60px;
      background-color: #fff;
      position: relative;
      left:22px;
      border-radius: 4px;
      top:56px;
    }
  }

</style>
